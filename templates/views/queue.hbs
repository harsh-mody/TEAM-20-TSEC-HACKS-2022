<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Queue</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="css/header.css">
    <link rel="stylesheet" href="css/stack_pg.css">
</head>
<body>
    {{>navbar}}
    <div class="stack_page">
    <div class="container-fluid">
        <div class="row">
            <div class="col-5">
                <h1>Queue</h1>
                <p class="st_info">A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO). A good example of a queue is any queue of consumers for a resource where the consumer that came first is served first. The difference between stacks and queues is in removing. In a stack we remove the item the most recently added; in a queue, we remove the item the least recently added.</p>
                <button class="accordion">Code</button>
                <div class="panel"><p>
                <xmp class="stack_code">#include <iostream>
using namespace std;
int queue[100], n = 100, front = - 1, rear = - 1;
void Insert() {
    int val;
    if (rear == n - 1)
    cout<<"Queue Overflow"<<endl;
    else {
        if (front == - 1)
        front = 0;
        cout<<"Insert the element in queue : "<<endl;
        cin>>val;
        rear++;
        queue[rear] = val;
    }
}
void Delete() {
    if (front == - 1 || front > rear) {
        cout<<"Queue Underflow ";
        return ;
    } else {
        cout<<"Element deleted from queue is : "<< queue[front] <<endl;
        front++;;
    }
}
void Display() {
    if (front == - 1)
    cout<<"Queue is empty"<<endl;
    else {
        cout<<"Queue elements are : ";
        for (int i = front; i <= rear; i++)
        cout<<queue[i]<<" ";
            cout<<endl;
    }
}
int main() {
    int ch;
    cout<<"1) Insert element to queue"<<endl;
    cout<<"2) Delete element from queue"<<endl;
    cout<<"3) Display all the elements of queue"<<endl;
    cout<<"4) Exit"<<endl;
    do {
        cout<<"Enter your choice : "<<endl;
        cin>>ch;
        switch (ch) {
            case 1: Insert();
            break;
            case 2: Delete();
            break;
            case 3: Display();
            break;
            case 4: cout<<"Exit"<<endl;
            break;
            default: cout<<"Invalid choice"<<endl;
        }
    } while(ch!=4);
    return 0;
}
            </xmp></p>
            </div>
            </div>
            <div class="col-7" style="height: 100vh;">
                <h1 class="stack_heading">Queue Visualization</h1>
                <div class="row" style='height: 100%;'>
                    <div class="col-4" >
                        <div id='container2' ondrop="drop(event)" ondragover="allowDrop(event)"></div>
                    </div>
                    <div class="col-8">
                        <div class="Operation_btn">
                            <div class="Operation_btn1" onclick="push()"><button type="button" class="btn ">Enqueue</button></div>
                            <div class="Operation_btn1" ondrop="dropStack(event)" ondragover="allowDrop(event)" onclick="dropStack()"><button type="button" class="btn">Dequeue</button></div>
                        </div>
                        <div id='container1'>
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    <script src="js/queue.js"></script>
   
</body>
</html>