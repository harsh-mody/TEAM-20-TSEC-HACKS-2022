<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deque</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="css/header.css">
    <link rel="stylesheet" href="css/stack_pg.css">
</head>
<body>
    {{>navbar}}
    <div class="stack_page">
    <div class="container-fluid">
        <div class="row">
            <div class="col-5">
                <h1>Deque</h1>
                <p lass="st_info">Deque or Double Ended Queue is a type of queue in which insertion and removal of elements can either be performed from the front or the rear. Thus, it does not follow FIFO rule (First In First Out). Types of Deque:
                    Input Restricted Deque:
                    In this deque, input is restricted at a single end but allows deletion at both the ends.
                    Output Restricted Deque:
                    In this deque, output is restricted at a single end but allows insertion at both the ends.</p>
                <button class="accordion">Code</button>
                <div class="panel">
                        <div class="stack_code"><xmp>#include<stdio.h>
#define SIZE 5
int deque[SIZE] , front=-1 , rear=-1 ;
void insertFront(int);
void insertRear(int);
void deleteFront(void);
void deleteRear(void);
void display(void);
int isOverflow(void);
int isUnderflow(void);
void main()
{
    int choice , ele ;
    while(1)
    {
        printf("/*Deque operations**/\n");
        printf("1.InsertFront\n");
        printf("2.InsertRear\n");
        printf("3.DeleteFront\n");
        printf("4.DeleteRear\n");
        printf("5.Display\n");
        printf("6.Quit\n");

        printf("Enter your choice : ");
        scanf("%d", &choice);
        
        if(choice==1 || choice==2)
        {
            printf("Enter element to insert : ");
            scanf("%d", &ele);
        }

        switch(choice)
        {
            case 1		:	insertFront(ele);
                        break ;
            
            case 2		:	insertRear(ele);
                        break ;
            
            case 3		:	deleteFront();
                        break ;
            
            case 4		:	deleteRear();
                        break ;
            
            case 5		:	display();
                        break ;
            
            case 6		:	exit(1);
            defualt	:	printf("Invalid choice...\n\n");
        }
    }
}
void insertFront(int ele)
{
    if(isOverflow())
    {
        printf("Deque is Full \n\n");
    }
    else
    {
        if(front==-1)
        {
            front = rear = 0;
        }
        else if(front==0)
        {
            front = SIZE-1 ;
        }
        else
        {
            front--;
        }
        deque[front] = ele ;
    }
}
void insertRear(int ele)
{
    if(isOverflow())
    {
        printf("Deque is Full \n\n");
    }
    else
    {
        if(rear==-1)
        {
            front = rear = 0 ;
        }
        else if(rear==SIZE-1)
        {
            rear = 0 ;
        }
        else
        {
            rear++ ;
        }
        deque[rear] = ele ;
    }
}
void deleteFront(void)
{
    if(isUnderflow())
    {
        printf("Deque is Empty \n\n");
    }
    else
    {
        printf("Deleted : %d \n\n", deque[front]);
        if(front==rear)
        {
            front = rear = -1 ;
        }
        else if(front == SIZE-1)
        {
            front = 0 ;
        }
        else
        {
            front++ ;
        }
    }
}
void deleteRear(void)
{
    if(isUnderflow())
    {
        printf("Deque is Empty \n\n");
    }
    else
    {
        printf("Deleted : %d \n\n", deque[rear]);
        if(front==rear)
        {
            front = rear = -1 ;
        }
        else if(rear == 0)
        {
            rear = SIZE-1 ;
        }
        else
        {
            rear-- ;
        }
    }
}
void display()
{
    int i;
    if(front == -1)
    {
        printf("No elements to display\n\n");
    }
    else if(front<=rear)
    {
        for(i=front ; i<=rear ; i++)
        {
            printf("Element %d : %d \n", i+1, deque[i]);
        }
        printf("\n");
    }
    else
    {
        for(i=front ; i<=SIZE-1; i++)
        {
            printf("Element %d : %d \n",i+1,deque[i]);
        }
        for(i=0 ; i<=rear ; i++)
        {
            printf("Element %d : %d \n",i+1,deque[i]);
        }
        printf("\n");
    }
}
int isOverflow(void)
{
    if((front==rear+1) || (front==0 && rear==SIZE-1))
        return 1 ;
    else
        return 0 ;
}

int isUnderflow(void)
{
    if(front==-1 || rear==-1)
        return 1 ;
    else
        return 0 ;
}
            </xmp></div></div>
            </div>
            <div class="col-7" style="height: 100vh;">
                <h1 class="stack_heading">Deque Visualization</h1>
                <div class="row" style='height: 100%;'>
                    <div class="col-4" >
                        <div id='container2' style="min-height: 10%; border-left: 1px solid black; border-right: 1px solid black;border-bottom: 1px solid black; margin-left: 20px; margin-top: 50px; width: 40%;" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
                    </div>
                    <div class="col-8">
                        <div class="Operation_btn">
                        <div style="text-align: right; margin-top: 50px;">
                            <div style="height: 50px; width: 10%; margin-left: 80%;" onclick="pushFront()" class="Operation_btn1"><button type="button" class="btn " style="margin-left: -50px">Enqueue Front</button></div>
                            <div style="height: 50px; width: 10%; margin-left: 80%;" onclick="push()" class="Operation_btn1"><button type="button" class="btn " style="margin-left: -50px">Enqueue Back</button></div>
                            <div style="height: 50px; width: 10%; margin-left: 80%;" ondrop="dropStack(event)" class="Operation_btn1" ondragover="allowDrop(event)" onclick="dropStack()" style="margin-left: -50px"><button type="button" class="btn " style="margin-left: -50px">Dequeue Front</button></div>
                            <div style="height: 50px; width: 10%; margin-left: 80%;" ondrop="dropStack(event)" class="Operation_btn1" ondragover="allowDrop(event)" onclick="dropStackBack()"><button type="button" class="btn " style="margin-left: -50px">Dequeue Back</button></div>
                        </div>
                        </div>
                        <div id='container1'>
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    <script src="js/deque.js"></script>
    <style>
        #container1{
            padding-top: 30%;
        }

        .funfact {
        visibility: hidden;
        width: 120px;
        background-color: black;
        color: #fff;
        text-align: center;
        padding: 5px 0;
        border-radius: 6px;
        margin-left: -200px;
    /* Position the tooltip text - see examples below! */
        position: absolute;
        z-index: 1;
    }

    .funfactbutton:hover .funfact {
        visibility: visible;
    }


    </style>
</body>
</html>